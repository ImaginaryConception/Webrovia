{% extends 'base.html.twig' %}

{% block title %}Gestion de la base de données - {{ dbName }}{% endblock %}

{% block stylesheets %}
{{ parent() }}
<link rel="stylesheet" href="{{ asset('css/database.css') }}">
<style>
    /* Style pour l'éditeur de requêtes */
    .query-editor {
        font-family: monospace;
        min-height: 150px;
        resize: vertical;
    }
</style>
{% endblock %}

{% block page_title %}Gestion de la base de données - {{ dbName }}{% endblock %}
{% block page_subtitle %}Gérez votre base de données MySQL facilement{% endblock %}

{% block body %}
<div class="container">
    <div class="db-card mb-4">
        <div class="db-card-header">
            <h2>Gestion de la base de données - {{ dbName }}</h2>
            <div class="flex space-x-2">
                <a href="{{ path('app_cpanel_database_index') }}" class="db-btn db-btn-secondary db-btn-icon">
                    <i class="fas fa-arrow-left"></i> Retour aux bases de données
                </a>
            </div>
        </div>
        <div class="db-card-body">
            <div class="alert alert-info mb-4">
                <p class="dark:text-white text-black"><i class="fas fa-info-circle"></i> Gérez votre base de données MySQL facilement. Attention : les modifications sont définitives.</p>
            </div>
            
            {% for label, messages in app.flashes %}
                {% for message in messages %}
                    <div class="alert alert-{{ label }} mb-4 dark:text-white text-black">
                        {{ message }}
                    </div>
                {% endfor %}
            {% endfor %}
            
            <!-- Mot de passe de la base de données (commun à tous les onglets) -->
            <div class="db-form-section dark:bg-dark bg-white">
                <form action="{{ path('app_cpanel_database_query', {'dbName': dbName}) }}" method="post">
                    <div class="db-form-group">
                        <label for="db_password" class="db-label">Mot de passe de la base de données (optionnel)</label>
                        <div class="flex">
                            <input type="password" id="db_password" name="db_password" class="db-input" placeholder="Entrez le mot de passe de la base de données" value="{{ app.session.get('db_password_' ~ dbName) }}">
                            <button type="submit" name="save_password" class="db-btn db-btn-secondary ms-3 db-btn-icon">
                                <i class="fas fa-save"></i> Enregistrer
                            </button>
                        </div>
                        <p class="db-help-text">Si vous avez créé cette base de données avec un mot de passe spécifique, veuillez le saisir ici. Le mot de passe sera sauvegardé en session pour les requêtes ultérieures.</p>
                        {% if app.session.get('db_password_' ~ dbName) %}
                            <p class="db-help-text" style="color: var(--success-color);"><i class="fas fa-check-circle"></i> Un mot de passe est déjà enregistré pour cette base de données.</p>
                        {% endif %}
                    </div>
                </form>
            </div>
            
            
            <!-- Contenu de l'onglet Requêtes SQL -->
            <div id="tab-sql" class="tab-content active">
                <div class="db-form-section dark:bg-dark bg-white">
                    <h3 class="db-form-header">Exécuter une requête SQL</h3>
                    <form action="{{ path('app_cpanel_database_query', {'dbName': dbName}) }}" method="post" id="sql-query-form">
                        <div class="db-form-group">
                            <label for="query" class="db-label">Requête SQL</label>
                            <textarea id="query" name="query" class="query-editor db-input" placeholder="SELECT * FROM table_name;">{{ query }}</textarea>
                        </div>
                        <input type="hidden" name="db_password" value="{{ app.session.get('db_password_' ~ dbName) }}">
                        <div class="db-form-footer">
                            <div></div>
                            <button type="submit" name="execute_query" class="db-btn db-btn-primary db-btn-icon">
                                <i class="fas fa-play"></i> Exécuter
                            </button>
                        </div>
                    </form>
                </div>
                
                {% if result is defined %}
                    <div class="mt-6">
                        
                        {% if result.error is defined %}
                            <div class="alert alert-danger mb-3">
                                <p><i class="fas fa-exclamation-triangle"></i> Erreur : {{ result.error }}</p>
                            </div>
                        {% elseif result.message is defined %}
                            <div class="alert alert-success mb-3">
                                <p class="dark:text-white text-black"><i class="fas fa-check-circle"></i> {{ result.message }}</p>
                            </div>
                        {% elseif result.data is defined and result.data is not empty %}
                            <h3 class="text-xl font-semibold mb-4 dark:text-white text-black">Résultats</h3>
                            <div class="result-table dark:text-white text-black mb-3 db-table-container">
                                <table class="db-table">
                                    <thead>
                                        <tr class="text-black">
                                            {% for column in result.data[0]|keys %}
                                                <th>{{ column }}</th>
                                            {% endfor %}
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {% for row in result.data %}
                                            <tr class="text-black">
                                                {% for value in row %}
                                                    <td>{{ value }}</td>
                                                {% endfor %}
                                            </tr>
                                        {% endfor %}
                                    </tbody>
                                </table>
                            </div>
                        {% else %}
                            {% if success is defined and success is not empty %}
                                <div class="alert alert-success mb-3">
                                    <p class="dark:text-white text-black"><i class="fas fa-check-circle"></i> {{ success }}</p>
                                </div>
                            {% else %}
                                <div class="alert hidden alert-info mb-3">
                                    <p class="dark:text-white text-black"><i class="fas fa-info-circle"></i> La requête a été exécutée avec succès, mais n'a retourné aucun résultat.</p>
                                </div>
                            {% endif %}
                        {% endif %}
                    </div>
                {% endif %}
            </div>
            
            <!-- Contenu de l'onglet Créer une table -->
            <div id="tab-create-table" class="tab-content">
                <div class="db-form-section dark:bg-dark bg-white">
                    <h3 class="db-form-header">Créer une nouvelle table</h3>
                    <div class="alert alert-info mb-4">
                        <p class="text-black"><i class="fas fa-magic"></i> Une entité Doctrine et son repository seront automatiquement générés lors de la création de la table.</p>
                    </div>
                    <form action="{{ path('app_cpanel_database_query', {'dbName': dbName}) }}" method="post" id="create-table-form">
                        <div class="db-form-group">
                            <label for="table_name" class="db-label">Nom de la table</label>
                            <input type="text" id="table_name" name="table_name" class="db-input" placeholder="Entrez le nom de la table" required>
                        </div>
                        
                        <div class="db-form-group">
                            {# <label class="db-label">Ajouter un ID auto-incrémenté ?</label> #}
                            <div class="db-checkbox-container hidden">
                                <input type="checkbox" id="add_id_field" name="add_id_field" checked>
                                <label for="add_id_field" class="db-checkbox-label">Oui, ajouter un champ ID auto-incrémenté comme clé primaire</label>
                            </div>
                        </div>
                        
                        <div class="db-form-group">
                            <label class="db-label mt-3">Champs de la table</label>
                            <div id="fields-container" class="db-dynamic-fields">
                                <div class="field-row">
                                    <input type="text" name="field_name[]" class="db-input mb-3 db-field-name" placeholder="Nom du champ" required>
                                    <select name="field_type[]" class="db-select">
                                        <option value="VARCHAR(255)">Texte court (VARCHAR)</option>
                                        <option value="TEXT">Texte long (TEXT)</option>
                                        <option value="INT">Nombre entier (INT)</option>
                                        <option value="DECIMAL(10,2)">Nombre décimal (DECIMAL)</option>
                                        <option value="DATE">Date</option>
                                        <option value="DATETIME">Date et heure</option>
                                        <option value="BOOLEAN">Booléen</option>
                                    </select>
                                    <div class="checkbox-container mb-3 mt-3">
                                        <input type="checkbox" name="field_null[0]" id="field_null_0">
                                        <label for="field_null_0">Peut être vide</label>
                                    </div>
                                    <div class="field-actions hidden">
                                        <button type="button" class="db-btn db-btn-sm db-btn-danger remove-field" disabled>
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="db-btn db-btn-secondary db-btn-sm btn-add-field mt-3">
                                <i class="fas fa-plus"></i> Ajouter un champ
                            </button>
                        </div>
                        
                        <input type="hidden" name="db_password" value="{{ app.session.get('db_password_' ~ dbName) }}">
                        <input type="hidden" name="query" id="create_table_query">
                        <div class="db-form-footer">
                            <div></div>
                            <button type="submit" name="create_table" class="db-btn db-btn-primary db-btn-icon">
                                <i class="fas fa-table"></i> Créer la table
                            </button>
                        </div>
                    </form>
                </div>
            </div>
            
            <!-- Liste des tables (visible dans tous les onglets) -->
            <div class="mt-6">
                <h3 class="text-xl font-semibold mb-4 dark:text-white text-black">Tables dans {{ dbName }}</h3>
                {% if tables is empty %}
                    <p class="text-gray-500">Aucune table trouvée dans cette base de données.</p>
                {% else %}
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {% for table in tables %}
                            <div class="db-card">
                                <div class="db-card-header">
                                    <h4>{{ table }}</h4>
                                </div>
                                <div class="db-card-body">
                                    <div class="flex space-x-2">
                                        <button onclick="document.getElementById('query').value = 'SELECT * FROM {{ table }};'; switchToTab('sql'); document.getElementById('sql-query-form').submit();" class="db-btn db-btn-sm db-btn-secondary db-btn-icon">
                                            <i class="fas fa-eye"></i> Voir
                                        </button>
                                        <button onclick="document.getElementById('query').value = 'DESCRIBE {{ table }};'; switchToTab('sql'); document.getElementById('sql-query-form').submit();" class="db-btn db-btn-sm db-btn-secondary db-btn-icon">
                                             <i class="fas fa-info-circle"></i> Structure
                                         </button>
                                         <button onclick="openAddDataModal('{{ table }}');" class="db-btn db-btn-sm db-btn-secondary db-btn-icon">
                                             <i class="fas fa-database"></i> Données
                                         </button>
                                    </div>
                                    <div class="flex space-x-2 mt-3">
                                        <form action="{{ path('app_cpanel_database_drop_table', {'dbName': dbName, 'tableName': table}) }}" method="post" class="inline delete-table-form">
                                            <button type="submit" class="db-btn db-btn-sm db-btn-danger db-btn-icon" data-table-name="{{ table }}">
                                                <i class="fas fa-trash"></i> Supprimer
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                {% endif %}
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="deleteConfirmationModal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close-button">&times;</span>
            <h2>Confirmer la suppression</h2>
            <p>Êtes-vous sûr de vouloir supprimer la table <strong id="tableNameToDelete"></strong> ? Cette action est irréversible.</p>
            <div class="modal-actions">
                <button id="cancelDelete" class="db-btn db-btn-secondary">Annuler</button>
                <button id="confirmDelete" class="db-btn db-btn-danger">Supprimer</button>
            </div>
        </div>
    </div>

    <!-- Add Data Modal -->
    <div id="addDataModal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close-button">&times;</span>
            <h2>Ajouter des données à la table <span id="addDataTableName"></span></h2>
            <form id="addDataForm" action="{{ path('app_cpanel_database_add_data', {'dbName': dbName}) }}" method="post">
                <input type="hidden" name="table_name" id="addDataModalTableNameInput">
                <div id="addDataFields" class="db-form-section">
                    <!-- Fields will be dynamically loaded here -->
                </div>
                <input type="hidden" name="db_password" value="{{ app.session.get('db_password_' ~ dbName) }}">
                <div class="modal-actions">
                    <button type="button" id="cancelAddData" class="db-btn db-btn-secondary">Annuler</button>
                    <button type="submit" class="db-btn db-btn-primary">Ajouter</button>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Gestion des onglets
        const tabs = document.querySelectorAll('.tab');
        const tabContents = document.querySelectorAll('.tab-content');
        
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const tabId = tab.getAttribute('data-tab');
                
                tabs.forEach(item => item.classList.remove('active'));
                tab.classList.add('active');
                
                tabContents.forEach(content => {
                    if (content.id === `tab-${tabId}`) {
                        content.classList.add('active');
                    } else {
                        content.classList.remove('active');
                    }
                });
            });
        });

        // Function to switch tabs programmatically
        window.switchToTab = function(tabId) {
            tabs.forEach(tab => {
                if (tab.getAttribute('data-tab') === tabId) {
                    tab.click();
                }
            });
        };

        // Handle table selection for management tab
        window.selectTableForManagement = function(tableName) {
            document.getElementById('table-select').value = tableName;
            switchToTab('manage-data');
            document.getElementById('select-table-form').submit();
        };

        // Add Data Modal Logic
        const addDataModal = document.getElementById('addDataModal');
        const addDataTableNameSpan = document.getElementById('addDataTableName');
        const addDataModalTableNameInput = document.getElementById('addDataModalTableNameInput');
        const addDataFieldsContainer = document.getElementById('addDataFields');
        const cancelAddDataButton = document.getElementById('cancelAddData');

        window.openAddDataModal = function(tableName) {
            addDataTableNameSpan.textContent = tableName;
            addDataModalTableNameInput.value = tableName;
            addDataFieldsContainer.innerHTML = ''; // Clear previous fields

            // Fetch table structure and dynamically add fields
            fetch(`{{ path('app_cpanel_database_get_table_structure', {'dbName': dbName}) }}?table_name=${tableName}`)
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        console.error('Error fetching table structure:', data.error);
                        return;
                    }
                    data.forEach(column => {
                        if (column.Field !== 'id') { // Exclude 'id' field
                            const fieldDiv = document.createElement('div');
                            fieldDiv.classList.add('db-form-group');
                            fieldDiv.innerHTML = `
                                <label for="${column.Field}" class="db-label">${column.Field} (${column.Type})</label>
                                <input type="text" id="${column.Field}" name="${column.Field}" class="db-input" ${column.Null === 'NO' && column.Default === null ? 'required' : ''}>
                            `;
                            addDataFieldsContainer.appendChild(fieldDiv);
                        }
                    });
                    addDataModal.style.display = 'flex';
                })
                .catch(error => console.error('Error:', error));
        };

        cancelAddDataButton.addEventListener('click', () => {
            addDataModal.style.display = 'none';
        });

        addDataModal.querySelector('.close-button').addEventListener('click', () => {
            addDataModal.style.display = 'none';
        });

        // Handle add data form submission via AJAX
        const addDataForm = document.getElementById('addDataForm');
        if (addDataForm) {
            addDataForm.addEventListener('submit', function(e) {
                e.preventDefault();

                const formData = new FormData(this);
                const url = this.action;

                fetch(url, {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Display success flash message
                        const alertDiv = document.createElement('div');
                        alertDiv.classList.add('alert', 'alert-success', 'mb-4');
                        alertDiv.innerHTML = `<p class="dark:text-white text-black"><i class="fas fa-check-circle"></i> ${data.message}</p>`;
                        document.querySelector('.db-card-body').prepend(alertDiv);
                        addDataModal.style.display = 'none'; // Close modal on success
                        // Optionally, refresh the table list or data display
                    } else if (data.error) {
                        // Display error flash message
                        const alertDiv = document.createElement('div');
                        alertDiv.classList.add('alert', 'alert-danger', 'mb-4');
                        alertDiv.innerHTML = `<p class="dark:text-white text-black"><i class="fas fa-exclamation-triangle"></i> Erreur : ${data.error}</p>`;
                        document.querySelector('.db-card-body').prepend(alertDiv);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    const alertDiv = document.createElement('div');
                    alertDiv.classList.add('alert', 'alert-danger', 'mb-4');
                    alertDiv.innerHTML = `<p><i class="fas fa-exclamation-triangle"></i> Une erreur inattendue est survenue.</p>`;
                    document.querySelector('.db-card-body').prepend(alertDiv);
                });
            });
        }

        // Dynamic field addition for table creation
        const fieldsContainer = document.getElementById('fields-container');
        const addFieldBtn = document.querySelector('.btn-add-field');
        let fieldCount = 1; // Start from 1 as one field is already present

        addFieldBtn.addEventListener('click', () => {
            const newFieldRow = document.createElement('div');
            newFieldRow.classList.add('field-row');
            newFieldRow.innerHTML = `
                <input type="text" name="field_name[]" class="db-input mb-3 db-field-name" placeholder="Nom du champ" required>
                <select name="field_type[]" class="db-select">
                    <option value="VARCHAR(255)">Texte court (VARCHAR)</option>
                    <option value="TEXT">Texte long (TEXT)</option>
                    <option value="INT">Nombre entier (INT)</option>
                    <option value="DECIMAL(10,2)">Nombre décimal (DECIMAL)</option>
                    <option value="DATE">Date</option>
                    <option value="DATETIME">Date et heure</option>
                    <option value="BOOLEAN">Booléen</option>
                </select>
                <div class="checkbox-container mb-3 mt-3">
                    <input type="checkbox" name="field_null[${fieldCount}]" id="field_null_${fieldCount}">
                    <label for="field_null_${fieldCount}">Peut être vide</label>
                </div>
                <div class="field-actions">
                    <button type="button" class="db-btn db-btn-sm db-btn-danger mb-3 remove-field">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `;
            fieldsContainer.appendChild(newFieldRow);
            fieldCount++;
            updateRemoveButtons();
        });

        fieldsContainer.addEventListener('click', (e) => {
            if (e.target.classList.contains('remove-field') || e.target.closest('.remove-field')) {
                const row = e.target.closest('.field-row');
                if (row) {
                    row.remove();
                    updateRemoveButtons();
                }
            }
        });

        function updateRemoveButtons() {
            const removeButtons = document.querySelectorAll('.remove-field');
            if (removeButtons.length === 1) {
                removeButtons[0].setAttribute('disabled', 'true');
            } else {
                removeButtons.forEach(button => button.removeAttribute('disabled'));
            }
        }

        updateRemoveButtons(); // Initial call to disable if only one field

        // Generate CREATE TABLE query dynamically
        const createTableForm = document.getElementById('create-table-form');
        if (createTableForm) {
            createTableForm.addEventListener('submit', function(e) {
                // e.preventDefault(); // Prevent default submission for now

                const tableName = document.getElementById('table_name').value;
                const addIdField = document.getElementById('add_id_field').checked;
                const fieldNames = document.querySelectorAll('input[name="field_name[]"]');
                const fieldTypes = document.querySelectorAll('select[name="field_type[]"]');
                const fieldNulls = document.querySelectorAll('[name^="field_null["]');

                let query = `CREATE TABLE ${tableName} (`;
                let fields = [];

                if (addIdField) {
                    fields.push('`id` INT AUTO_INCREMENT PRIMARY KEY');
                }

                fieldNames.forEach((nameInput, index) => {
                    const name = nameInput.value;
                    const type = fieldTypes[index].value;
                    const isNull = fieldNulls[index].checked ? 'NULL' : 'NOT NULL';
                    fields.push(`\`${name}\` ${type} ${isNull}`);
                });

                query += fields.join(', ');
                query += `);`;

                document.getElementById('create_table_query').value = query;
                // console.log(query); // For debugging
                // This form will now submit with the hidden query field populated
            });
        }

        // Modal Logic for Delete Table
        const deleteModal = document.getElementById('deleteConfirmationModal');
        const closeButton = document.querySelector('.close-button');
        const cancelDeleteButton = document.getElementById('cancelDelete');
        const confirmDeleteButton = document.getElementById('confirmDelete');
        const tableNameToDeleteSpan = document.getElementById('tableNameToDelete');
        let formToSubmit = null;

        document.querySelectorAll('.delete-table-form').forEach(form => {
            form.addEventListener('submit', function(e) {
                e.preventDefault(); // Prevent default form submission
                formToSubmit = this; // Store the form to be submitted later
                const tableName = this.querySelector('[data-table-name]').getAttribute('data-table-name');
                tableNameToDeleteSpan.textContent = tableName;
                deleteModal.style.display = 'flex'; // Show the modal
            });
        });

        closeButton.addEventListener('click', () => {
            deleteModal.style.display = 'none';
        });

        cancelDeleteButton.addEventListener('click', () => {
            deleteModal.style.display = 'none';
        });

        confirmDeleteButton.addEventListener('click', () => {
            if (formToSubmit) {
                formToSubmit.submit(); // Submit the stored form
            }
            deleteModal.style.display = 'none';
        });

        window.addEventListener('click', (event) => {
            if (event.target === deleteModal) {
                deleteModal.style.display = 'none';
            }
        });
    });
</script>
{% endblock %}