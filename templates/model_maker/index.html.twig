{% extends 'base.html.twig' %}

{% block title %}Model Maker - Générateur de Maquettes{% endblock %}

{% block page_title %}Model Maker{% endblock %}
{% block page_subtitle %}Créez des maquettes de sites web en quelques secondes grâce à l'intelligence artificielle{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style type="text/tailwindcss">
        .model-card {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .model-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
        .model-image {
            transition: transform 0.5s ease;
        }
        .model-image:hover {
            transform: scale(1.02);
        }
    </style>
{% endblock %}

{% block body %}
<div class="min-h-screen transition-colors duration-200">
    <div class="container mx-auto px-4 py-8">
        <div class="text-center mb-12">
            <h2 class="text-5xl font-extrabold mb-6">
                <span class="bg-clip-text text-transparent bg-gradient-to-r from-primary via-secondary to-accent">Model Maker</span>
            </h2>
            <p class="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
                Générez des maquettes visuelles pour vos sites web en quelques secondes grâce à l'intelligence artificielle.
            </p>
        </div>

        <!-- Formulaire de génération -->
        <div class="max-w-3xl mx-auto bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 mb-12">
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">Créer une nouvelle maquette</h3>
            
            <div id="error-alert" class="hidden mb-6 bg-red-100 border-l-4 border-red-500 text-red-700 p-4 dark:bg-red-900 dark:text-red-200" role="alert">
                <p id="error-message"></p>
            </div>
            
            {{ form_start(form, {'attr': {'id': 'model-maker-form', 'class': 'space-y-6'}}) }}
                <div class="space-y-2">
                    {{ form_label(form.title, null, {'label_attr': {'class': 'block text-sm font-medium text-gray-700 dark:text-gray-300'}}) }}
                    {{ form_widget(form.title) }}
                    {{ form_errors(form.title, {'attr': {'class': 'mt-2 text-sm text-red-600 dark:text-red-400'}}) }}
                </div>
                
                <div class="space-y-2">
                    {{ form_label(form.prompt, null, {'label_attr': {'class': 'block text-sm font-medium text-gray-700 dark:text-gray-300'}}) }}
                    {{ form_widget(form.prompt) }}
                    {{ form_errors(form.prompt, {'attr': {'class': 'mt-2 text-sm text-red-600 dark:text-red-400'}}) }}
                </div>
                
                <div class="flex justify-center">
                    <button type="submit" id="generate-button" class="group relative w-full sm:w-auto flex justify-center py-3 px-6 border border-transparent text-sm font-medium rounded-md text-white bg-gradient-to-r from-primary to-accent hover:from-primary-dark hover:to-accent-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-all duration-200">
                        <span id="button-text" class="flex items-center">
                            <i class="fas fa-wand-magic-sparkles mr-2 group-hover:rotate-12 transition-transform duration-200"></i>
                            Générer ma maquette
                        </span>
                        <span id="loading-spinner" class="hidden ml-3">
                            <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </span>
                    </button>
                </div>
            {{ form_end(form) }}
        </div>
        
        <!-- Zone de génération en cours -->
        <div id="generation-container" class="hidden max-w-3xl mx-auto bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 mb-12 text-center">
            <div class="flex justify-center mb-6">
                <svg class="animate-spin h-12 w-12 text-primary" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
            </div>
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">Génération en cours...</h3>
            <p id="generation-message" class="text-gray-600 dark:text-gray-300">Initialisation de la génération...</p>
        </div>
        
        <!-- Zone de prévisualisation -->
        <div id="preview-container" class="hidden max-w-4xl mx-auto bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 mb-12">
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center">Votre maquette</h3>
            <div class="flex justify-center">
                <img id="preview-image" src="" alt="Maquette générée" class="max-w-full h-auto rounded-lg shadow-lg model-image">
            </div>
            <div class="mt-6 text-center">
                <h4 id="preview-title" class="text-xl font-semibold text-gray-800 dark:text-white mb-2"></h4>
                <p id="preview-prompt" class="text-gray-600 dark:text-gray-300 mb-4"></p>
                <div class="flex justify-center space-x-4">
                    <a id="download-link" href="#" download class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-all duration-200">
                        <i class="fas fa-download mr-2"></i> Télécharger
                    </a>
                    <button id="new-model-button" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-secondary hover:bg-secondary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-secondary transition-all duration-200">
                        <i class="fas fa-plus mr-2"></i> Nouvelle maquette
                    </button>
                </div>
            </div>
        </div>

        <!-- Liste des maquettes générées -->
        {% if models|length > 0 %}
            <div class="max-w-7xl mx-auto mt-16" id="models-list">
                <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-8 text-center">Vos maquettes générées</h3>
                
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                    {% for model in models %}
                        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden model-card" data-model-id="{{ model.id }}">
                            <div class="relative pb-2/3">
                                {% if model.imageUrl %}
                                    <img src="{{ model.imageUrl }}" alt="{{ model.title }}" class="w-full h-48 object-cover">
                                {% else %}
                                    <div class="w-full h-48 bg-gray-200 dark:bg-gray-700 flex items-center justify-center">
                                        {% if model.status == 'pending' %}
                                            <div class="text-center">
                                                <svg class="animate-spin h-8 w-8 text-primary mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                                </svg>
                                                <p class="mt-2 text-sm text-gray-600 dark:text-gray-300">Génération en cours...</p>
                                            </div>
                                        {% elseif model.status == 'error' %}
                                            <div class="text-center text-red-500 dark:text-red-400">
                                                <i class="fas fa-exclamation-triangle text-4xl mb-2"></i>
                                                <p class="text-sm">Erreur de génération</p>
                                            </div>
                                        {% else %}
                                            <div class="text-center text-gray-500 dark:text-gray-400">
                                                <i class="fas fa-image text-4xl mb-2"></i>
                                                <p class="text-sm">Image non disponible</p>
                                            </div>
                                        {% endif %}
                                    </div>
                                {% endif %}
                            </div>
                            <div class="p-6">
                                <h4 class="text-xl font-semibold text-gray-800 dark:text-white mb-2">{{ model.title }}</h4>
                                <p class="text-gray-600 dark:text-gray-300 text-sm mb-4 line-clamp-2">{{ model.prompt|length > 100 ? model.prompt|slice(0, 100) ~ '...' : model.prompt }}</p>
                                <div class="flex justify-between items-center">
                                    <span class="text-xs text-gray-500 dark:text-gray-400">{{ model.createdAt|date('d/m/Y H:i') }}</span>
                                    <div class="flex space-x-2">
                                        {% if model.imageUrl %}
                                            <a href="{{ model.imageUrl }}" target="_blank" class="text-primary hover:text-primary-dark dark:text-primary-light dark:hover:text-primary transition-colors duration-200">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <a href="{{ model.imageUrl }}" download class="text-secondary hover:text-secondary-dark dark:text-secondary-light dark:hover:text-secondary transition-colors duration-200">
                                                <i class="fas fa-download"></i>
                                            </a>
                                        {% endif %}
                                        <button type="button" class="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 transition-colors duration-200 delete-button" data-model-id="{{ model.id }}" data-csrf-token="{{ csrf_token('delete' ~ model.id) }}">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            </div>
        {% endif %}
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="delete-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800">
        <div class="mt-3 text-center">
            <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 dark:bg-red-700">
                <svg class="h-6 w-6 text-red-600 dark:text-red-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path></svg>
            </div>
            <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white mt-4">Confirmer la suppression</h3>
            <div class="mt-2 px-7 py-3">
                <p class="text-sm text-gray-500 dark:text-gray-300">Êtes-vous sûr de vouloir supprimer cette maquette ? Cette action est irréversible.</p>
            </div>
            <div class="items-center px-4 py-3">
                <button id="confirm-delete-button" class="px-4 py-2 bg-red-600 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm">
                    Supprimer
                </button>
                <button id="cancel-delete-button" class="mt-3 px-4 py-2 bg-gray-300 text-gray-800 text-base font-medium rounded-md w-full shadow-sm hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-2 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                    Annuler
                </button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('model-maker-form');
            const generateButton = document.getElementById('generate-button');
            const buttonText = document.getElementById('button-text');
            const loadingSpinner = document.getElementById('loading-spinner');
            const errorAlert = document.getElementById('error-alert');
            const errorMessage = document.getElementById('error-message');
            const generationContainer = document.getElementById('generation-container');
            const generationMessage = document.getElementById('generation-message');
            const previewContainer = document.getElementById('preview-container');
            const previewImage = document.getElementById('preview-image');
            const previewTitle = document.getElementById('preview-title');
            const previewPrompt = document.getElementById('preview-prompt');
            const downloadLink = document.getElementById('download-link');
            const newModelButton = document.getElementById('new-model-button');
            const modelsListContainer = document.getElementById('models-list');

            // Modal elements
            const deleteModal = document.getElementById('delete-modal');
            const confirmDeleteButton = document.getElementById('confirm-delete-button');
            const cancelDeleteButton = document.getElementById('cancel-delete-button');
            let modelToDeleteId = null;
            let modelToDeleteElement = null;
            let modelToDeleteCsrfToken = null;
            
            // Gestionnaire pour le formulaire de génération
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Réinitialiser les messages d'erreur
                errorAlert.classList.add('hidden');
                
                // Afficher le spinner de chargement
                buttonText.classList.add('hidden');
                loadingSpinner.classList.remove('hidden');
                generateButton.disabled = true;
                
                // Afficher le conteneur de génération
                form.parentElement.classList.add('hidden');
                generationContainer.classList.remove('hidden');
                
                // Envoyer la requête AJAX
                const formData = new FormData(form);
                
                fetch('{{ path("app_model_maker_generate") }}', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Si la génération a réussi, commencer le polling pour le statut
                         modelId = data.modelId; // Assurez-vous que modelId est défini ici
                         checkStatusInterval = setInterval(function() { checkGenerationStatus(modelId, form); }, 2000);
                    } else {
                        // Si la génération a échoué
                        showError(data.error || data.errors.join(', '));
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    showError('Une erreur est survenue lors de la communication avec le serveur');
                });
            });
            
            let checkStatusInterval = null;

             function checkGenerationStatus(modelId, form) {
                 fetch(`{{ path('app_model_maker_status', {'id': 'MODEL_ID'}) }}`.replace('MODEL_ID', modelId), {
                     headers: {
                         'X-Requested-With': 'XMLHttpRequest'
                     }
                 })
                 .then(response => response.json())
                 .then(data => {
                     if (data.success) {
                         // Mettre à jour le message de génération
                         generationMessage.textContent = data.message;
                         
                         if (data.status === 'completed' && data.imageUrl) {
                             // La génération est terminée avec succès
                             clearInterval(checkStatusInterval);
                             showPreview(modelId, data.imageUrl, form);
                             updateModelsList(); // Mettre à jour la liste des modèles
                         } else if (data.status === 'error') {
                             // La génération a échoué
                             clearInterval(checkStatusInterval);
                             showError(data.error || 'Une erreur est survenue lors de la génération');
                         }
                     }
                 })
                 .catch(error => {
                     console.error('Erreur:', error);
                     clearInterval(checkStatusInterval);
                     showError('Une erreur est survenue lors de la vérification du statut');
                 });
             }
             
             // Fonction pour afficher la prévisualisation
            function showPreview(modelId, imageUrl, form) {
                // Masquer le conteneur de génération
                generationContainer.classList.add('hidden');
                
                // Afficher le conteneur de prévisualisation
                previewContainer.classList.remove('hidden');
                
                // Mettre à jour l'image et les informations
                previewImage.src = imageUrl;
                previewTitle.textContent = form.querySelector('#model_maker_title').value;
                previewPrompt.textContent = form.querySelector('#model_maker_prompt').value;
                downloadLink.href = imageUrl;
                
                // Réinitialiser le formulaire
                form.reset();
                buttonText.classList.remove('hidden');
                loadingSpinner.classList.add('hidden');
                generateButton.disabled = false;
            }
            
            // Gestionnaire pour le bouton "Nouvelle maquette"
            newModelButton.addEventListener('click', function() {
                previewContainer.classList.add('hidden');
                form.parentElement.classList.remove('hidden');
            });

            // Fonction pour afficher une erreur
            function showError(message) {
                // Masquer le conteneur de génération
                generationContainer.classList.add('hidden');
                
                // Afficher le formulaire
                form.parentElement.classList.remove('hidden');
                
                // Afficher le message d'erreur
                errorMessage.textContent = message;
                errorAlert.classList.remove('hidden');
                
                // Réinitialiser le bouton
                buttonText.classList.remove('hidden');
                loadingSpinner.classList.add('hidden');
                generateButton.disabled = false;
            }

            // Fonction pour mettre à jour la liste des modèles
            function updateModelsList() {
                fetch('{{ path("app_model_maker") }}', {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.text())
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newModelsListHtml = doc.querySelector('#models-list .grid').innerHTML;
                    modelsListContainer.querySelector('.grid').innerHTML = newModelsListHtml;
                    attachDeleteButtonListeners(); // Rattacher les écouteurs d'événements aux nouveaux boutons de suppression
                })
                .catch(error => {
                    console.error('Erreur lors de la mise à jour de la liste des modèles:', error);
                });
            }

            // Gestionnaire pour les boutons de suppression (délégation d'événements)
            function attachDeleteButtonListeners() {
                document.querySelectorAll('.delete-button').forEach(button => {
                    button.removeEventListener('click', handleDeleteButtonClick); // Éviter les écouteurs multiples
                    button.addEventListener('click', handleDeleteButtonClick);
                });
            }

            function handleDeleteButtonClick(e) {
                modelToDeleteId = e.currentTarget.dataset.modelId;
                modelToDeleteElement = e.currentTarget.closest('.model-card');
                modelToDeleteCsrfToken = e.currentTarget.dataset.csrfToken;
                deleteModal.classList.remove('hidden');
            }

            // Gestionnaire pour le bouton de confirmation de suppression
            confirmDeleteButton.addEventListener('click', function() {
                if (modelToDeleteId && modelToDeleteElement && modelToDeleteCsrfToken) {
                    fetch(`{{ path('app_model_maker_delete', {'id': 'MODEL_ID'}) }}`.replace('MODEL_ID', modelToDeleteId), {
                        method: 'POST',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'Content-Type': 'application/x-www-form-urlencoded'
                        },
                        body: `_token=${modelToDeleteCsrfToken}`
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            modelToDeleteElement.remove(); // Supprimer l'élément du DOM
                            // Optionnel: afficher un message de succès temporaire
                        } else {
                            showError(data.error || 'Erreur lors de la suppression de la maquette');
                        }
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                        showError('Une erreur est survenue lors de la communication avec le serveur');
                    })
                    .finally(() => {
                        deleteModal.classList.add('hidden');
                        modelToDeleteId = null;
                        modelToDeleteElement = null;
                        modelToDeleteCsrfToken = null;
                    });
                }
            });

            // Gestionnaire pour le bouton d'annulation de suppression
            cancelDeleteButton.addEventListener('click', function() {
                deleteModal.classList.add('hidden');
                modelToDeleteId = null;
                modelToDeleteElement = null;
                modelToDeleteCsrfToken = null;
            });

            // Fermer la modale si l'utilisateur clique en dehors
            window.addEventListener('click', function(event) {
                if (event.target === deleteModal) {
                    deleteModal.classList.add('hidden');
                    modelToDeleteId = null;
                    modelToDeleteElement = null;
                    modelToDeleteCsrfToken = null;
                }
            });

            // Attacher les écouteurs au chargement initial
            attachDeleteButtonListeners();
        });
    </script>
{% endblock %}